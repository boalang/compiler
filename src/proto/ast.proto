package boa.types;

import "shared.proto";

option optimize_for = SPEED;

/** @exclude TODO */
message CommentsRoot {
	repeated Comment comments = 1;
}

/** Container class that holds a file's parsed AST */
message ASTRoot {
	/** The top-level namespaces in the file */
	repeated Namespace namespaces = 1;
	/** The imported namespaces and types */
	repeated string imports = 2;
	/** @exclude */
	repeated string names = 3;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 4;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 5;
}

/** A namespace (aka, package) in a source file */
message Namespace {
	/** The name of the namespace */
	required string name = 1;
	/** Any modifiers/annotations on the namespace */
	repeated Modifier modifiers = 2;
	/** Declarations contained in this namespace */
	repeated Declaration declarations = 3;
	/** Statements contained in this namespace */
	repeated Statement statements = 4;
	/** Methods contained in this namespace */
	repeated Method methods = 5;
	/** Expressions contained in this namespace */
	repeated Expression expressions = 6;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 7;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 8;
}

/** A type declaration, such as a class or interface */
message Declaration {
	/** The name of this declaration */
	required string name = 1;
	/** The kind of this declaration */
	required TypeKind kind = 2;
	/** The modifiers/annotations on this declaration */
	repeated Modifier modifiers = 3;
	/** Any generic parameters to this declaration */
	repeated Type generic_parameters = 4;
	/** The explicitly named parent type(s) of this declaration */
	repeated Type parents = 5;
	/** The methods in the declaration */
	repeated Method methods = 6;
	/** The fields in the declaration */
	repeated Variable fields = 7;
	/** Any nested declarations */
	repeated Declaration nested_declarations = 8;
	/** @exclude TODO */
	repeated Comment comments = 9;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 10;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 11;
	/** For Specs use */
	repeated SpecStatement specs = 1000;
	optional string key = 1001;
}

/** The kinds of types in an AST */
enum TypeKind {
	option allow_alias = true;
	/** Any other kind of Type */
	OTHER = 0;
	/** A class type */
	CLASS = 1;
	/** An interface type */
	INTERFACE = 2;
	/** An anonymous type */
	ANONYMOUS = 3;
	/** @exclude */
	ANON = 3;
	/** A C-style struct */
	STRUCT = 4;
	/** An enumerated type */
	ENUM = 5;
	/** @exclude */
	ENUMERATION = 5;
	/** An annotation type */
	ANNOTATION = 6;
	/** A delegate type */
	DELEGATE = 7;
	/** A generic type */
	GENERIC = 8;
}

/** A type in an AST */
message Type {
	/** The name of the type */
	required string name = 1;
	/** The kind of the type */
	required TypeKind kind = 2;
	/** @exclude */
	optional string id = 4;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 5;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 6;
}

/** A method declaration */
message Method {
	/** The name of the method */
	optional string name = 1;
	/** A list of all modifiers on the variable */
	repeated Modifier modifiers = 2;
	/** The type returned from the method; if the method returns nothing, this type will be void */
	required Type return_type = 3;
	/** The list of generic parameters for this method */
	repeated Type generic_parameters = 4;
	/** The arguments the method takes */
	repeated Variable arguments = 5;
	/** The list of exceptions thrown by this method */
	repeated Type exception_types = 6;
    /**
	  * The statements in the method body. Note that most methods (in C-like
	  * languages, such as Java) contain a single statement of type BLOCK, which
	  * contains the list of statements within it!
      */
	repeated Statement statements = 7;
	/** @exclude TODO */
	repeated Comment comments = 8;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 9;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 10;
	/** For Specs use */
	optional string key = 11;
}

/** A variable declaration - can be a field, local, parameter, etc */
message Variable {
	/** The name of the variable */
	required string name = 1;
	/** The type of the variable */
	required Type variable_type = 2;
	/** A list of all modifiers on the variable */
	repeated Modifier modifiers = 3;
	/** If the variable has an initial assignment, the expression is stored here */
	optional Expression initializer = 4;
	/** @exclude TODO */
	repeated Comment comments = 5;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 6;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 7;
	/** For Specs use */
	optional string key = 8;
}

/** A single statement */
message Statement {
	/** The kind of statement */
	enum StatementKind {
		option allow_alias = true;
		/** Any other statement */
		OTHER = 0;
		BLOCK = 1;
		TYPEDECL = 2;
		EXPRESSION = 3;
		/** @exclude */
		EXPR = 3;
		SYNCHRONIZED = 4;
		/** @exclude */
		SYNC = 4;
		RETURN = 5;
		FOR = 6;
		DO = 7;
		WHILE = 8;
		IF = 9;
		ASSERT = 10;
		BREAK = 11;
		CONTINUE = 12;
		LABEL = 13;
		SWITCH = 14;
		CASE = 15;
		TRY = 16;
		THROW = 17;
		CATCH = 18;
		EMPTY = 19;
		/** For Specs use */
		SPEC_REQUIRES = 1000;
		SPEC_ENSURES = 1001;
		SPEC_SIGNALS = 1002;
		SPEC_SIGNALS_ONLY = 1003;
		SPEC_ASSIGNABLE = 1004;
		SPEC_MAINTAINING = 1005;
		SPEC_ASSUME = 1006;
		SPEC_SET = 1007;
		SPEC_DIVERGES = 1008;
		SPEC_ACCESSIBLE = 1009;
		SPEC_CAPTURES = 1010;
		SPEC_CALLABLE = 1011;
		SPEC_WHEN = 1012;
		SPEC_DURATION = 1013;
		SPEC_MEASURES = 1014;
		SPEC_IN = 1015;
		SPEC_INVARIANT = 1016;
		SPEC_REPRESENTS = 1017;
		SPEC_INITIALLY = 1018;
		SPEC_TYPE = 1019;
		SPEC_BEHAVIOR = 1020;
		SPEC_BEHAVIOUR = 1021;
		SPEC_NORMAL_BEHAVIOR = 1022;
		SPEC_NORMAL_BEHAVIOUR = 1023;
		SPEC_EXCEPTIONAL_BEHAVIOR = 1024;
		SPEC_EXCEPTIONAL_BEHAVIOUR = 1025;
		SPEC_ASSERT = 1026;
	}
	/** The kind of statement */
	required StatementKind kind = 1;
	/** @exclude TODO */
	repeated Comment comments = 2;
	repeated Statement statements = 3;
	repeated Expression initializations = 4;
	optional Expression condition = 5;
	repeated Expression updates = 6;
	optional Variable variable_declaration = 7;
	optional Declaration type_declaration = 8;
	optional Expression expression = 9;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 10;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 11;
	/** For Specs use */
	repeated SpecStatement specs = 1000;
	optional string key = 1001;
}

/** A single expression */
message Expression {
	/** The kind of expression */
	enum ExpressionKind {
		/** Any other expression */
		OTHER = 0;
		LITERAL = 1;
		VARACCESS = 2;
		VARDECL = 3;
		METHODCALL = 4;
		CAST = 5;
		ARRAYINDEX = 6;
		ARRAYINIT = 7;
		TYPECOMPARE = 8;
		NEW = 9;
		NEWARRAY = 10;
		OP_ADD = 11;
		OP_SUB = 12;
		OP_MULT = 13;
		OP_DIV = 14;
		OP_MOD = 15;
		OP_INC = 16;
		OP_DEC = 17;
		BIT_LSHIFT = 18;
		BIT_RSHIFT = 19;
		BIT_UNSIGNEDRSHIFT = 20;
		BIT_AND = 21;
		BIT_OR = 22;
		BIT_NOT = 23;
		BIT_XOR = 24;
		LOGICAL_NOT = 25;
		LOGICAL_AND = 26;
		LOGICAL_OR = 27;
		EQ = 28;
		NEQ = 29;
		LT = 30;
		GT = 31;
		LTEQ = 32;
		GTEQ = 33;
		CONDITIONAL = 34;
		NULLCOALESCE = 35;
		ASSIGN = 36;
		ASSIGN_ADD = 37;
		ASSIGN_SUB = 38;
		ASSIGN_MULT = 39;
		ASSIGN_DIV = 40;
		ASSIGN_MOD = 41;
		ASSIGN_BITXOR = 42;
		ASSIGN_BITAND = 43;
		ASSIGN_BITOR = 44;
		ASSIGN_LSHIFT = 45;
		ASSIGN_RSHIFT = 46;
		ASSIGN_UNSIGNEDRSHIFT = 47;
		ANNOTATION = 48;
		PAREN = 49;
		/** @exclude TODO */
		METHOD_REFERENCE = 50;
		/** @exclude TODO */
		LAMBDA = 51;
		/** @exclude TODO */
		ANON_METHOD = 52;
		/** For Specs use */
		SPEC_RESULT = 1000;
		SPEC_OLD = 1001;
		SPEC_FRESH = 1002;
		SPEC_NONNULLELEMENTS = 1003;
		SPEC_TYPEOF = 1004;
		SPEC_ELEMTYPE = 1005;
		SPEC_TYPE = 1006;
		SPEC_FORALL = 1007;
		SPEC_EXISTS = 1008;
		SPEC_SUBTYPE = 1009;
		SPEC_EQUIVALENCE = 1010;
		SPEC_INEQUIVALENCE = 1011;
		SPEC_FORWARD = 1012;
		SPEC_REVERSE = 1013;
		SPEC_NOTHING = 1014;
		SPEC_EVERYTHING = 1015;
		SPEC_NOTSPECIFIED = 1016;
		NEXT = 1017;
		GLOBALLY = 1018;
		FINALLY = 1019;
		UNTIL = 1020;
		RELEASE = 1021;
		INPLY = 1022;
	}
	/** The kind of expression */
	required ExpressionKind kind = 1;
	repeated Expression expressions = 2;
	repeated Variable variable_decls = 3;
	optional Type new_type = 4;
	repeated Type generic_parameters = 5;
	optional bool is_postfix = 6;
	optional string literal = 7;
	optional string variable = 8;
	optional string method = 9;
	repeated Expression method_args = 10;
	optional Declaration anon_declaration = 11;
	optional Modifier annotation = 12;
	/** @exclude */
	optional Method lambda = 13;
	/** @exclude */
	optional bool no_parens = 14;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 15;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 16;
}

/** A single modifier */
message Modifier {
	/** The kind of modifier */
	enum ModifierKind {
		option allow_alias = true;
		/** Any other modifier - the value is in the <a href="#Modifier">Modifier</a>'s <code>other</code> attribute */
		OTHER = 0;
		/** A <a href="#Visibility">Visibility</a> modifier - the value is in the <a href="#Modifier">Modifier</a>'s <code>visibility</code> attribute */
		VISIBILITY = 1;
		/** An annotation modifier */
		ANNOTATION = 2;
		/** A final modifier */
		FINAL = 3;
		/** A static modifier */
		STATIC = 4;
		/** A synchronized modifier */
		SYNCHRONIZED = 5;
		/** @exclude */
		SYNC = 5;
		/** An abstract modifier */
		ABSTRACT = 6;
		/** An instance in specification modifier */
		SPEC_INSTANCE = 1000;
		/** A model in specification modifier */
		SPEC_MODEL = 1001;
		/** A ghost in specification modifier */
		SPEC_GHOST = 1002;
		/** A helper in specification modifier */
		SPEC_HELPER = 1003;
		/** A represent in specification modifier */
		SPEC_REP = 1004;
		/** A peer in specification modifier */
		SPEC_PEER = 1005;
		/** A pure in specification modifier */
		SPEC_PURE = 1006;
	}
	/** A visibility modifier */
	enum Visibility {
		option allow_alias = true;
		/** A public modifier */
		PUBLIC = 1;
		/** A private modifier */
		PRIVATE = 2;
		/** A protected modifier */
		PROTECTED = 3;
		/** A namespace (aka, default, aka package) visibility modifier */
		NAMESPACE = 4;
		/** @exclude */
		PACKAGE = 4;
		/** @exclude */
		DEFAULT = 4;
		/** A public modifier in specification*/
		SPEC_PUBLIC = 1000;
		/** A protected modifier in specification*/		
		SPEC_PROTECTED = 1001;
	}
	/** The kind of modifier */
	required ModifierKind kind = 1;
	/** A kind of visibility modifier */
	optional Visibility visibility = 2;
	/** If the <code>kind</code> is <code>ANNOTATION</code>, then the name of the annotation */
	optional string annotation_name = 3;
	/** If the <code>kind</code> is <code>ANNOTATION</code>, then a list of all members explicitly assigned values */
	repeated string annotation_members = 4;
	/** If the <code>kind</code> is <code>ANNOTATION</code>, then a list of all values that were assigned to members */
	repeated Expression annotation_values = 5;
	/** If the <code>kind</code> is <code>OTHER</code>, the modifier string from the source code */
	optional string other = 6;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 7;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 8;
}

/** A single specification case */
message SpecCase {
	repeated Modifier modifiers = 1;
	repeated Statement statements = 2;
}


/** @exclude */
message Comment {
	/** @exclude */
	enum CommentKind {
		option allow_alias = true;
		OTHER = 0;
		LINE = 1;
		BLOCK = 2;
		DOC = 3;
		DOCUMENTATION = 3;
		SPEC = 4;
		SPECIFICATION = 4;
	}
	required CommentKind kind = 1;
	required string value = 2;
	required PositionInfo position = 3;
	/** Kind of change on the structure: UNCHANGED, ADDED, DELETED/REMOVED, MOVED */
	optional ChangeKind structural_change_kind = 4;
	/** Kind of change on the label: UNCHANGED, ADDED, DELETED/REMOVED, RENAMED */
	optional ChangeKind label_change_kind = 5;
}

/** @exclude */
message PositionInfo {
	required int32 start_pos = 1;
	required int32 length = 2;
	required int32 start_line = 3;
	required int32 start_col = 4;
	required int32 end_line = 5;
	required int32 end_col = 6;
}

/** A single declaration for specification */
message SpecDeclaration {
	repeated Modifier modifiers = 1;
	repeated Statement statements = 2;
}

/** A single method for specification */
message SpecMethod {
	repeated SpecCase cases = 1;
	repeated Modifier modifiers = 2;
}

/** A single statement for specification */
message SpecStatement {
	repeated Statement statements = 1;
}

/** A single variable for specification */
message SpecVariable {
	repeated Modifier modifiers = 1;
}