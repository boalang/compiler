VoidMethodsTotal: output sum of int;
VoidMethodsMax: output maximum(1) of string weight int;
VoidMethodsMin: output minimum(1) of string weight int;
VoidMethodsMean: output mean of int;

p: Project = input;

void_meth_cur_val := 0;
void_meth_s: stack of int;

q15 := visitor {
	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	before node: Declaration ->
		if (node.kind == TypeKind.CLASS || node.kind == TypeKind.ANONYMOUS) {
			push(void_meth_s, void_meth_cur_val);
			void_meth_cur_val = 0;
		} else
			stop;
	after node: Declaration -> {
		VoidMethodsTotal << void_meth_cur_val;
		if (void_meth_cur_val > 0) {
			VoidMethodsMax << p.id weight void_meth_cur_val;
			VoidMethodsMin << p.id weight void_meth_cur_val;
			VoidMethodsMean << void_meth_cur_val;
		}
		void_meth_cur_val = pop(void_meth_s);
	}
	before node: Method ->
		if (node.return_type.name == "void")
			void_meth_cur_val++;
};

visit(p, q15);
