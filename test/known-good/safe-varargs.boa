#
# Author: rdyer
#
USES: output collection[string][string][time] of int;
p: Project = input;

project_url := p.project_url;
file_name: string;
commit_date: time;

safe_varargs := visitor {
	before node: ChangedFile -> {
		if (!iskind("SOURCE_JAVA_JLS", node.kind))
			stop;
		file_name = node.name;
	}
	before node: Revision -> commit_date = node.commit_date;
	before node: Method -> {
		# @SafeVarargs
		if (has_annotation(node, "SafeVarargs")) {
			USES[project_url][file_name][commit_date] << 1;
        } else {
		    # @SuppressWarnings({"unchecked", "varargs"})
		    mod := get_annotation(node, "SuppressWarnings");
		    if (def(mod))
                foreach (i: int; mod.annotation_members[i] == "value") {
				    e := mod.annotation_values[i];
				    if (e.kind == ExpressionKind.ARRAYINIT) {
					    foundUnchecked := false;
                        foundVarargs := false;
                        foreach (j: int; e.expressions[j].kind == ExpressionKind.LITERAL) {
						    if (e.expressions[j].literal == "unchecked")
							    foundUnchecked = true;
						    if (e.expressions[j].literal == "varargs")
							    foundVarargs = true;
					    }
					    if (foundUnchecked && foundVarargs)
                			USES[project_url][file_name][commit_date] << 1;
				    }
				    break;
			    }
        }
    }
};

visit(p, safe_varargs);
