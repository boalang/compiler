o: output sum of int;
o << 1;
p := input;

a: array of int;
a[1] = 3;
a = a + a;
a = a + {3, 6};

s: stack of int;
push(s, 3);

t := T"Sat Jan  1 00:00:00 GMT 2005";
t = addmonth(addyear(t), 1);

m: map[string] of int;
m["hi"] = 3;
m[string(a)] = 5;
m2: map[string] of string;
vals := values(m2);
k := keys(m2);
type mytype = bool;
type mytype3 = mytype;
type mytype2 = map[mytype3] of mytype;
#m3: mytype2;
m3: map[mytype3] of mytype;
vals2 := values(m3);
k2 := keys(m3);
name := string(ExpressionKind.METHODCALL);

s2: set of int;
add(s2, 3);
add(s2, 3);
add(s2, 4);
if (contains(s2, 3))
	remove(s2, 3);
clear(s2);
concat := "a" + "b";

foo:string = p.code_repositories[0].kind;
foo2:string = input.programming_languages;

visitor {
	before _ -> parts := "";
	before n: CodeRepository -> {
		snapshot := getsnapshot(n);
		foreach (i: int; snapshot[i])
			visit(snapshot[i]);
		stop;
	}
};

getsnapshots := function(cr: CodeRepository, t: time, filters: array of string) : array of ChangedFile {
	snapshot: map[string] of ChangedFile;

	switch (cr.kind) {
		case RepositoryKind.GIT:
			;
		case RepositoryKind.SVN, RepositoryKind.CVS:
			break;
		default:
			break;
	}
	visit(cr, visitor {
		before node: Revision ->
			if (node.commit_date > t)
				stop;
		before node: ChangedFile -> {
			filter := len(filters) > 0;

			exists (i: int; iskind(filters[i], node.kind))
				filter = false;

			if (!filter) {
				if (node.change == ChangeKind.DELETED)
					remove(snapshot, node.name);
				else
					snapshot[node.name] = node;
			}
		}
	});

	return values(snapshot);
};

imax := function(a: array of int, cmp: function(l: int, r: int) : int) : int {
	v := a[0];
	for (i := 1; i < len(a); i++)
		if (cmp(v, a[i]) < 0)
			v = a[i];
	return v;
};

maxv := imax(a, function(l: int, r: int) : int { return l - r; });

arr := function() : array of int { return {3, 4, 5}; };
if (arr()[2] == 3) a = a + a;
# this should work without lexing error
#});
