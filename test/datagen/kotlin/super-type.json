{
   "namespaces": [
      {
         "name": "boa.kotlin.test",
         "declarations": [
            {
               "name": "Derived",
               "kind": "CLASS",
               "parents": [
                  {
                     "name": "Base",
                     "kind": "CLASS"
                  },
                  {
                     "name": "Foo",
                     "kind": "CLASS"
                  }
               ],
               "methods": [
                  {
                     "name": "<init>",
                     "modifiers": [
                        {
                           "kind": "OTHER",
                           "other": "primary"
                        }
                     ],
                     "arguments": [
                        {
                           "name": "p",
                           "variable_type": {
                              "name": "Int",
                              "kind": "OTHER"
                           },
                           "modifiers": [
                              {
                                 "kind": "IMPLICIT"
                              },
                              {
                                 "kind": "FINAL"
                              }
                           ]
                        }
                     ],
                     "statements": [
                        {
                           "kind": "BLOCK",
                           "statements": [
                              {
                                 "kind": "EXPRESSION",
                                 "expressions": [
                                    {
                                       "kind": "METHODCALL",
                                       "method": "Foo",
                                       "method_args": [
                                          {
                                             "kind": "VARACCESS",
                                             "variable": "p"
                                          }
                                       ]
                                    }
                                 ]
                              }
                           ]
                        }
                     ]
                  },
                  {
                     "name": "foo",
                     "statements": [
                        {
                           "kind": "BLOCK",
                           "statements": [
                              {
                                 "kind": "EXPRESSION",
                                 "expressions": [
                                    {
                                       "kind": "METHODCALL",
                                       "method": "println",
                                       "method_args": [
                                          {
                                             "kind": "TEMPLATE",
                                             "expressions": [
                                                {
                                                   "kind": "TEMPLATE",
                                                   "literal": "\"P is \""
                                                },
                                                {
                                                   "kind": "TEMPLATE",
                                                   "expressions": [
                                                      {
                                                         "kind": "VARACCESS",
                                                         "variable": "p"
                                                      }
                                                   ],
                                                   "literal": "\"${p}\""
                                                },
                                                {
                                                   "kind": "TEMPLATE",
                                                   "literal": "\".\""
                                                }
                                             ],
                                             "literal": "\"P is ${p}.\""
                                          }
                                       ]
                                    }
                                 ]
                              }
                           ]
                        }
                     ]
                  }
               ]
            }
         ]
      }
   ]
}

