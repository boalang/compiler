identifierMap ::= [
		"Xtrue" : "true",
		"Xfalse" : "false",
		"XPI" : "Math.PI",
		"XInf" : "Double.POSITIVE_INFINITY",
		"Xinf" : "Double.POSITIVE_INFINITY",
		"XNaN" : "Double.NaN",
		"Xnan" : "Double.NaN",
		"XSECOND" : "(1000 * 1000)",
		"XSEC" : "(1000 * 1000)",
		"XMINUTE" : "(60 * 1000 * 1000)",
		"XMIN" : "(60 * 1000 * 1000)",
		"XHOUR" : "(60 * 60 * 1000 * 1000)",
		"XHR" : "(60 * 60 * 1000 * 1000)",
		"Xinput" : "_input",
		default : {___<id>}
]
		
VarDecl(isstatic, type, id) ::= "<if(isstatic)>static <endif><type> ___<id>;<\n>"
ArrayType(type) ::= "<type>[]"
MapType(key, value) ::= "java.util.HashMap\<<key>, <value>>"
StackType(value) ::= "java.util.Stack\<<value>>"
QueueType(value) ::= "java.util.LinkedList\<<value>>"
SetType(value) ::= "java.util.HashSet\<<value>>"
Block(statements) ::= <<
{
	<statements:{s | <s>}>}
>>
ExprStatement(expression, operator) ::= "<expression><operator>;<\n>"
ForStatement(declaration, expression, exprstmt, statement) ::= <<
for (<declaration> <expression>; <exprstmt>)
<statement>

>>
IfStatement(expression, statement, elseStatement) ::= <<
if (<expression>)
<statement>
<if(elseStatement)>
else
<elseStatement>
<endif>
>>
WhenStatement(all, some, len, type, index, expression, statement) ::= <<
<if(all)>
{
	boolean _satisfied_<index> = true;
	for (<type> ___<index> = 0; ___<index> \< <len>; ___<index>++)
		if (!(<expression>))
		{
			_satisfied_<index> = false;
			break;
		}
	if (_satisfied_<index>)
	<statement>
}

<else>
for (<type> ___<index> = 0; ___<index> \< <len>; ___<index>++)
{
	<if(some)>
	boolean _stop_<index> = false;
	<endif>
	if (<expression>)
	{
		<if(some)>
		_stop_<index> = true;
		<endif>
		<statement>
	}
	<if(some)>
	if (_stop_<index>) break;
	<endif>
}

<endif>
>>
Expression(lhs, operators, operands) ::= "<lhs><operators,operands:{operator,operand|<\ ><operator> <operand>}>"
Index(map, operand, index, slice) ::= "<if(map)><operand>.get(<index>)<elseif(slice)>java.util.Arrays.copyOfRange(<operand>, <index>, <slice>)<else><operand>[<index>]<endif>"
Call(call, operand, parameters) ::= "<if(call)><call><else><operand>(<parameters>)<endif>"
Composite(type, exprlist) ::= "new <type> {<\n><exprlist><\n>}"
Pair(map, key, value) ::= "put(<key>, <value>);"
Identifier(id) ::= "<identifierMap.([\"X\", id])>"
Assignment(lhs, operator, rhs) ::= "<lhs> <operator> <rhs>;<\n>"
Break() ::= "break;<\n>"
Continue() ::= "continue;<\n>"
Stop() ::= "return false;<\n>"
Switch(expr, cases, body) ::= <<
switch (<expr>)
{
	<cases>
	default:
	<body>
}

>>
SwitchCase(cases, body) ::= <<
<cases:{c | case <c>:<\n>}><body>

>>
DoWhile(condition, stmt) ::= <<
do
<stmt>
while (<condition>);

>>
While(condition, stmt) ::= <<
while (<condition>)
<stmt>

>>
FunctionType(name, ret, args, types) ::= <<
private interface <name>
{
	<ret> invoke(<args,types:{arg,type|final <type> ___<arg>}; separator=", ">) throws Exception;
}<\n>

>>
Function(type, staticDeclarations, ret, args, types, body) ::= <<
new <type>()
{
	<staticDeclarations>
	@Override
	public <ret> invoke(<args,types:{arg,type|final <type> ___<arg>}; separator=", ">) throws Exception
	<body>
}
>>

TupleType(name, fields, types, protos, enums) ::= <<
public static class <name> implements boa.runtime.Tuple, java.io.Serializable
{	
	<name>(){}
	
	<fields,types:{field,type|<type> ___<field>;}; separator="\n">

	<name>(<fields,types:{field,type|<type> ___<field>}; separator=", ">) {
		<fields,types,protos,enums:{field,type,proto,enum|<if(proto)>this.___<field> = ___<field>;<elseif(enum)>this.___<field> = ___<field>;<else>this.___<field> = new <type>(___<field>);<endif>}; separator="\n">
	}
	
	<name>(<name> tmp) {
		<fields,types,protos,enums:{field,type,proto,enum|<if(proto)> this.___<field> = tmp.___<field>;<elseif(enum)> this.___<field> = tmp.___<field>;<else> this.___<field> = new <type>(tmp.___<field>);<endif>}; separator="\n">
	}

	public <name> clone() {
		return new <name>(this);
	}

	public String toString() {
		String s = "{";
		<fields:{field|
if (s.length() > 1) s += ",";
s += " <field> = " + this.___<field>;}; separator="\n">
		s += " }";
		return s;
	}
	
	public byte[] serialize(Object o) throws java.io.IOException { 
		java.io.ByteArrayOutputStream byteOutStream = new java.io.ByteArrayOutputStream();
		java.io.ObjectOutputStream objectOut = new java.io.ObjectOutputStream(byteOutStream);
		objectOut.writeObject(o);
		objectOut.close();
		return byteOutStream.toByteArray();
	}
	
	public String[] getValues() {
		return new String[] {<fields:{field|String.valueOf(this.___<field>)}; separator=", "> };
	}
	
	public String[] getFieldNames() { 
		return new String[] {<fields:{field|"___<field>"}; separator=", "> };
	}
	
	public Object getValue(String f) {
		<fields:{field| 
		if(f.equals("___<field>")) 
			return ___<field>;
		}; separator=" ">
		return "empty";
	}
}<\n>
>>

Tuple(name, exprlist) ::= "new <name>(<exprlist>) <\n>"

EnumType(ename, fields, values, fname) ::= <<
private enum <ename>
{
	<fields,values:{field,value|<field>(<value>)}; separator=", ">;

	private <fname> value;
	private <ename> (<fname> value) {
		this.value = value;
	}

	public Object getValue() {
		return this.value;
	}

	public String toString() {
		return this.value + "";
	}
}<\n>
>>

Visitor(staticDeclarations, body) ::= <<
new boa.runtime.BoaAbstractVisitor()
{
	<if(staticDeclarations)>
	<staticDeclarations>
	<endif>
	<body:{s | <s><\n>}>}
>>

Traversal(staticDeclarations, body, T, loopSensitive, flowSensitive) ::= <<
new boa.runtime.BoaAbstractTraversal\<<T>\>(<flowSensitive>, <loopSensitive>)
{
	<if(staticDeclarations)>
	<staticDeclarations>
	<endif>
	<body:{s | <s><\n>}>}
>>

FixP(staticDeclarations, body, T) ::= <<
new boa.runtime.BoaAbstractFixP()
{
	<if(staticDeclarations)>
	<staticDeclarations>
	<endif>
	<body:{s | <s><\n>}>}
>>

VisitClause(ret, name, arg, type, body) ::= <<
<if(arg)>
@Override
protected <ret> <name>(final <type> <arg>) throws Exception
{
	<body>\}
<else>
@Override
protected <ret> <name>() throws Exception
{
	<body>}<endif>
>>
Return(expr) ::= "return<if(expr)> <expr><endif>;<\n>"

TraverseClause(ret, name, args, types, body) ::= <<
<if(ret)>
protected <ret> <name>(final <types> <args>) throws Exception
{
	<body>\}
<else>
protected void <name>(final <types> <args>) throws Exception
{
	<body>\}
<endif>
<if(ret)>
@Override
public void traverse(final <types> node, boolean flag) throws Exception {
		if(flag) {
			currentResult = new <ret>(preTraverse(node));
			outputMapObj.put(node.getId(), new <ret>(currentResult));
		}
		else
			outputMapObj.put(node.getId(), new <ret>(preTraverse(node)));
}
<else>
@Override
public void traverse(final <types> node, boolean flag) throws Exception {
		preTraverse(node);
}
<endif>
>>

FixPClause(arg1, arg2, type, body) ::= <<
public boolean invoke1(final <type> <arg1>, final <type> <arg2>) throws Exception {
		<body>
}

@Override
public boolean invoke(Object <arg1>, Object <arg2>) throws Exception{
		return invoke1((<type>)<arg1>, (<type>)<arg2>);
}
>>
